//app.module.js
//mark.lawrence

(function () {
    angular.module('app',
    [
        //application modules
        'app.core',
        'app.service',
        'app.filter',

        //feature areas
        'app.nav',
        'app.home',
        'app.censors',
        'app.people',
        'app.settings',
        'app.users',
        'app.profile',
        'app.kiosk'
    ]).config(['$stateProvider', '$urlRouterProvider', config]).run(['$rootScope', 'logger', 'userService', function ($rootScope, logger, service) {
        logger.log('app running');
    }]);

    function config($stateProvider, $urlRouterProvider) {
        //$locationProvider.html5Mode(true);

        $stateProvider
            .state('home',
                    {
                        url: '/',
                        templateUrl: 'app/kiosk/views/home.html',
                        controller: 'KioskController',
                        controllerAs: 'vm',
                        resolve: {
                            censors: function (censorService) {
                                return censorService.get();
                            },
                            config: function (configurationService) {
                                return configurationService.get();
                            }
                        }
                    })
            .state('home.create',
                    {
                        url: 'create',
                        templateUrl: 'app/kiosk/views/partial-create.html'
                    })
            .state('home.search',
                    {
                        url: 'search',
                        templateUrl: 'app/kiosk/views/partial-search.html'
                    })
            .state('home.pledge',
                    {
                        url: 'pledge',
                        templateUrl: 'app/kiosk/views/partial-pledge.html'
                    })
            .state('home.list',
                    {
                        url: 'list',
                        templateUrl: 'app/kiosk/views/partial-list.html'
                    })
            .state('home.finish',
                    {
                        url: 'finish',
                        templateUrl: 'app/kiosk/views/partial-finish.html'
                    })
            .state('home.config',
                    {
                        url: 'configuration',
                        templateUrl: 'app/kiosk/views/partial-config.html'
                    });

        $urlRouterProvider.otherwise('/');
    };
})();
//core.module.js
//mark.lawrence

(function () {
    angular.module('app.core',
        [
            //angular modules
            'ngMessages',
            'angularLocalStorage',
            'ui.router',
            'ngAnimate',

            //custom modules
            'blocks.logger',
            'blocks.exception',

            //third party modules
            'smart-table',
            'ui.bootstrap',
            'ngTagsInput',
            'ngFileUpload',
            'rzModule',
            'switcher',
            'gfl.textAvatar'
        ])
        .constant('toastr', toastr)
        .constant('moment', moment);;
})();
//config.js
//mark.lawrence
(function () {
    function toastrConfig(toastr) {
        toastr.options.timeOut = 4000;
        toastr.options.positionClass = 'toast-bottom-right';
    };

    var keyCodes = {
        backspace: 8,
        tab: 9,
        enter: 13,
        esc: 27,
        space: 32,
        pageup: 33,
        pagedown: 34,
        end: 35,
        home: 36,
        left: 37,
        up: 38,
        right: 39,
        down: 40,
        insert: 45,
        del: 46
    };

    var apiEndPoints = {
        Censor: 'censor',
        Person: 'person',
        User: 'users',
        Configuration: 'configuration'
    };

    var config = {
        appErrorPrefix: '[CRMC Error] ', //Configure the exceptionHandler decorator
        appTitle: 'CRMC',
        version: '1.0.0',
        apiUrl: 'http://' + window.location.host + '/api/',
        keyCodes: keyCodes,
        apiEndPoints: apiEndPoints
    };

    var defaults = {
        EMAIL_SUFFIX: '@splcenter.org',
        GENERIC_PASSWORD: '1P@ssword'
    };

    angular.module('app.core')
        .config(toastrConfig)
        .constant('config', config)
        .value('defaults', defaults);
})();
//mark.lawrence
//exception.module.js

(function () {
    angular.module('blocks.exception', ['blocks.logger']);
})();
(function () {
    'use strict';

    angular.module('blocks.logger', []);
})();
//censors.module.js
//mark.lawrence

(function () {
    angular.module('app.censors', []);
})();
//settomgs.module.js
//mark.lawrence

(function () {
    angular.module('app.settings', []);
})();
//filter.module.js
//mark.lawrence

(function () {
    angular.module('app.filter', []);
})();
(function () {
    'use strict';

    angular.module('app.home', []);
})();
(function () {
    'use strict';

    angular.module('app.kiosk', []);
})();

//(function () {
//    "use strict";
//    angular.module('app.kiosk', []);

//    //app.config(['$stateProvider', '$urlRouterProvider', config]);

//    //function config($stateProvider, $urlRouterProvider) {
//    //    //$locationProvider.html5Mode(true);

//    //    $stateProvider
//    //        .state('home',
//    //                {
//    //                    url: '/',
//    //                    templateUrl: 'app/kiosk/views/home.html',
//    //                    controller: 'KioskController',
//    //                    controllerAs: 'vm',
//    //                    resolve: {
//    //                        censors: function (censorService) {
//    //                            return censorService.get();
//    //                        },
//    //                        config: function (configurationService) {
//    //                            return configurationService.get();
//    //                        }
//    //                    }
//    //                })
//    //        .state('home.create',
//    //                {
//    //                    url: 'create',
//    //                    templateUrl: 'app/kiosk/views/partial-create.html'
//    //                })
//    //        .state('home.search',
//    //                {
//    //                    url: 'search',
//    //                    templateUrl: 'app/kiosk/views/partial-search.html'
//    //                })
//    //        .state('home.pledge',
//    //                {
//    //                    url: 'pledge',
//    //                    templateUrl: 'app/kiosk/views/partial-pledge.html'
//    //                })
//    //        .state('home.list',
//    //                {
//    //                    url: 'list',
//    //                    templateUrl: 'app/kiosk/views/partial-list.html'
//    //                })
//    //        .state('home.finish',
//    //                {
//    //                    url: 'finish',
//    //                    templateUrl: 'app/kiosk/views/partial-finish.html'
//    //                })
//    //        .state('home.config',
//    //                {
//    //                    url: 'configuration',
//    //                    templateUrl: 'app/kiosk/views/partial-config.html'
//    //                });

//    //    $urlRouterProvider.otherwise('/');
//    //}
//}());
//mark.lawrence
//nav.module.js

(function () {
    angular.module('app.nav', []);
})();
//people.module.js
//mark.lawrence

(function () {
    angular.module('app.people', []);
})();
//mark.lawrence
//profile.module.js

(function () {
    angular.module('app.profile', []);
})();
//service.module.js
//mark.lawrence

(function () {
    angular.module('app.service', []);
})();
(function () {
    'use strict';

    angular.module('app.users', []);
})();
//mark.lawrence
//exception-handler.provider.js

// Include in index.html so that app level exceptions are handled.
// Exclude from testRunner.html which should run exactly what it wants to run
(function () {
    'use strict';

    angular
        .module('blocks.exception')
        .provider('exceptionHandler', exceptionHandlerProvider)
        .config(config);

    /**
     * Must configure the exception handling
     * @return {[type]}
     */
    function exceptionHandlerProvider() {
        /* jshint validthis:true */
        this.config = {
            appErrorPrefix: undefined
        };

        this.configure = function (appErrorPrefix) {
            this.config.appErrorPrefix = appErrorPrefix;
        };

        this.$get = function () {
            return { config: this.config };
        };
    };

    /**
     * Configure by setting an optional string value for appErrorPrefix.
     * Accessible via config.appErrorPrefix (via config value).
     * @param  {[type]} $provide
     * @return {[type]}
     * @ngInject
     */
    function config($provide) {
        $provide.decorator('$exceptionHandler', extendExceptionHandler);
    };

    /**
     * Extend the $exceptionHandler service to also display a toast.
     * @param  {Object} $delegate
     * @param  {Object} exceptionHandler
     * @param  {Object} logger
     * @return {Function} the decorated $exceptionHandler service
     */
    function extendExceptionHandler($delegate, exceptionHandler, logger) {
        return function (exception, cause) {
            var appErrorPrefix = exceptionHandler.config.appErrorPrefix || '';
            var errorData = { exception: exception, cause: cause };
            exception.message = appErrorPrefix + exception.message;
            $delegate(exception, cause);
            /**
             * Could add the error to a service's collection,
             * add errors to $rootScope, log errors to remote web server,
             * or log locally. Or throw hard. It is entirely up to you.
             * throw exception;
             *
             * @example
             *     throw { message: 'error message we added' };
             */
            logger.error(exception.message, errorData);
        };
    };
})();
//mark.lawrence
//exception.js

(function () {
    'use strict';

    angular
        .module('blocks.exception')
        .factory('exception', exception);

    /* @ngInject */
    function exception(logger) {
        var service = {
            catcher: catcher
        };

        return service;

        function catcher(message) {
            return function (reason) {
                logger.error(message, reason);
            };
        };
    };
})();
//mark.lawrence
//logger.js

(function () {
    'use strict';

    angular.module('blocks.logger').factory('logger', logger);

    logger.$inject = ['$log', 'toastr'];

    function logger($log, toastr) {
        var service = {
            showToasts: true,

            error: error,
            info: info,
            success: success,
            warning: warning,

            // straight to console; bypass toastr
            log: $log.log
        };

        return service;
        /////////////////////

        function error(message, data, title) {
            toastr.error(message, title);
            $log.error('Error: ' + message, data);
        };

        function info(message, data, title) {
            toastr.info(message, title);
            $log.info('Info: ' + message, data);
        };

        function success(message, data, title) {
            toastr.success(message, title);
            $log.info('Success: ' + message, data);
        };

        function warning(message, data, title) {
            toastr.warning(message, title);
            $log.warn('Warning: ' + message, data);
        };
    };
})();
//manager.js
//mark.lawrence

(function () {
    'use strict';

    var controllerId = 'CensorController';

    angular.module('app.censors').controller(controllerId, CensorController);

    CensorController.$inject = ['logger', '$uibModal', 'censorService'];

    function CensorController(logger, $modal, service) {
        var vm = this;
        vm.title = 'Censor Manager';
        vm.description = 'View and edit censored words';
        vm.isBusy = false;

        vm.censors = [];
        vm.currentEdit = {};
        vm.lastDeleted = null;
        vm.lastUpdated = null;
        vm.itemToEdit = {};

        var tableStateRef;

        activate();

        function activate() {
            logger.log(controllerId + ' activated');
        };

        vm.search = function (tableState) {
            tableStateRef = tableState;

            var searchTerm = '';
            if (typeof (tableState.search.predicateObject) != "undefined") {
                searchTerm = tableState.search.predicateObject.searchTerm;
            }
            vm.isBusy = true;
            service.query(searchTerm)
                .then(function (data) {
                    vm.censors = data;
                    vm.isBusy = false;
                });
        };

        vm.cancelEdit = function (id) {
            vm.currentEdit[id] = false;
        };

        vm.create = function () {
            var item = {};
            $modal.open({
                templateUrl: '/app/censors/views/censor.html',
                controller: ['$uibModalInstance', 'censorService', 'item', createCensorController],
                controllerAs: 'vm',
                resolve: {
                    item: function () { return item; }
                }
            })
                .result.then(function (data) {
                    vm.censors.unshift(data);
                });
        };

        vm.deleteItem = function (censor) {
            vm.lastDeleted = censor;
            service.remove(censor.id)
                .then(function (data) {
                    var idx = vm.censors.indexOf(censor);
                    vm.censors.splice(idx, 1);
                });
        };

        vm.editItem = function (censor) {
            vm.currentEdit[censor.id] = true;
            vm.itemToEdit = angular.copy(censor);
        };

        vm.saveItem = function (censor) {
            vm.currentEdit[censor.id] = false;
            angular.copy(censor, vm.lastUpdated = {});
            angular.extend(censor, vm.itemToEdit);
            service.update(vm.itemToEdit)
                .then(function (data) {
                    censor = data;
                });
        };

        vm.undoDelete = function () {
            service.create(vm.lastDeleted)
                .then(function (data) {
                    logger.success('Successfully restored ' + data.word);
                    vm.censors.unshift(data);
                    vm.lastDeleted = null;
                });
        };

        vm.undoChange = function () {
            service.update(vm.lastUpdated)
                .then(function (data) {
                    angular.forEach(vm.censors,
                        function (u, i) {
                            if (u.id === vm.lastUpdated.id) {
                                vm.censors[i] = vm.lastUpdated;
                            }
                        });
                    logger.success('Successfully restored ' + data.word);
                    vm.lastUpdated = null;
                });
        };
    };

    function createCensorController($modal, service, item) {
        var vm = this;

        vm.item = angular.copy(item);

        vm.close = close;
        vm.save = save;

        function close() {
            $modal.dismiss();
        };

        function save() {
            service.create(vm.item)
                .then(function (data) {
                    vm.item = data;
                    $modal.close(vm.item);
                });
        };
    };
})();
//manager.js
//mark.lawrence

(function () {
    var controllerId = 'SettingsController';

    angular.module('app.settings').controller(controllerId, mainController);

    mainController.$inject = ['logger', '$timeout', 'configurationService'];

    function mainController(logger, $timeout, service) {
        var vm = this;
        vm.title = 'Settings Configuration';

        vm.config = {};
        var hub = $.connection.wot;

        vm.isBusy = false;

        vm.lastSaved = {};
        vm.save = save;
        vm.undo = undo;

        activate();

        function activate() {
            logger.log(controllerId + ' actived');
            $.connection.hub.start()
                .done(function () {
                    logger.info('hub connection successful');
                });
            getSettings();
        };

        function getSettings() {
            service.get()
                .then(function (data) {
                    vm.config = data;
                    vm.lastSaved = angular.copy(vm.config);
                });
        };

        function save() {
            vm.isBusy = true;
            service.update(vm.config)
                .then(function (data) {
                    vm.config = data;
                    hub.server.configurationChange(vm.config)
                        .then(function () {
                            logger.info('Changes saved and sent to WOT');
                        });
                })
                .finally(function () {
                    logger.log('finally compelted');
                    vm.isBusy = false;
                });
        };

        function undo() {
            vm.config = vm.lastSaved;
        };
    };
})();
// blacklist.directive.js
// mark.lawrence

(function () {
    'use strict';

    angular.module('app')
        .directive('blacklistName',
            function () {
                return {
                    restrict: 'A',
                    scope: {
                        blacklist: '='
                    },
                    require: 'ngModel',
                    link: function (scope, ele, attrs, ctrl) {
                        ctrl.$validators.blacklist = function test(modelValue, viewValue) {
                            var value = modelValue || viewValue;
                            //console.log('from directive: value: ' + value);
                            //console.log('from directive: indexOf: ' + scope.blacklist.indexOf(value.toUpperCase()));
                            if (value) return scope.blacklist.indexOf(value.toUpperCase()) == -1;
                        };
                    }
                }
            });
})();
//mark.lawrence
//clear-key.directive.js

(function () {
    angular.module('app').directive("clearKey", function () {
        return {
            restrict: 'EA',
            require: 'ngModel',
            link: function (scope, el, attrs, ctrl) {
                el.on('keydown', function (event) {
                    if (event.which !== 27) { return; } // check key how you want
                    ctrl.$setViewValue(null);
                    ctrl.$render();
                    scope.$apply();
                });
            }
        };
    });
})();
//mark.lawrence
//smart-table.clearKey.js

(function () {
    angular.module('app').directive("stClearKey", function () {
        return {
            restrict: 'EA',
            require: '^stTable',
            link: function (scope, element, attrs, ctrl) {
                element.on('keydown', function (event) {
                    if (event.which !== 27) { return; } // check key how you want
                    return scope.$apply(function () {
                        var fieldName = element.context.attributes['st-search'].value;
                        var tableState = ctrl.tableState();
                        tableState.search.predicateObject[fieldName] = '';
                        return ctrl.pipe();
                    });
                });
            }
        };
    });
})();
//app.filter.js
//mark.lawrence

angular.module('app.filter').filter('percentage', ['$filter', function ($filter) {
    return function (input, decimals) {
        return $filter('number')(input * 100, decimals) + '%';
    };
}]);
(function () {
    'use strict';

    var controllerId = 'HomeController';

    angular.module('app.home').controller(controllerId, mainController);

    mainController.$inject = ['peopleService', 'censorService', 'userService', 'storage', 'logger'];

    function mainController(peopleService, censorService, userService, storage, logger) {
        var vm = this;
        vm.title = 'Home';

        vm.stat = {};
        vm.people = [];

        activate();

        var censors = [];

        function activate() {
            logger.log(controllerId + ' active');

            userService.get().then(function (data) {
                vm.user = data;
                localStorage.setItem('currentUser', JSON.stringify(vm.user));
            });

            censors = JSON.parse(storage.get('censors'));

            if (!censors) {
                censorService.query('')
                        .then(function (data) {
                            storage.set('censors', JSON.stringify(data));
                            censors = JSON.parse(storage.get('censors'));
                        });
            }
            refresh();
        };

        function refresh() {
            peopleService.getCurrentStats()
                .then(function (data) {
                    vm.stat = data;
                });

            peopleService.get()
                .then(function (data) {
                    vm.people = data;
                });
        };
    };
})();
//mark.lawrence
//kiosk.js

(function () {
    'use strict';

    var controllerId = 'KioskController';
    angular.module('app').controller(controllerId, KioskController);

    KioskController.$inject = ['$scope', '$log', '$state', '$timeout', 'peopleService', 'configurationService', 'censors', 'config'];

    function KioskController($scope, logger, $state, $timeout, peopleService, configurationService, censors, config) {
        var vm = this;
        var tableStateRef;
        var prevSelection = null;
        var timer;
        var waitTime = 5000;
        var keyCode = '';
        var hub = $.connection.wot;

        vm.title = 'welcome';
        vm.people = [];
        vm.config = config;
        vm.searchModel = {
            page: 1,
            pageSize: 13
        };
        vm.showValidationErrors = false;
        vm.kiosk = localStorage.getItem('kiosk') ? localStorage.getItem('kiosk') : '1';
        vm.availableKiosks = ['1', '2', '3', '4'];

        $.connection.hub.start().done(function () {
            logger.info('hub connection successful');
        });

        vm.toggleName = function (person) {
            if (prevSelection) {
                prevSelection.$selected = false;
            }
            if (prevSelection === person) {
                person.$selected = false;
                vm.person = undefined;
                prevSelection = null;
            } else {
                person.$selected = true;
                vm.person = person;
                prevSelection = person;
            }
            resetTimer();
        };

        vm.setFocus = function (event) {
            vm.editItem = event;

            if (event) vm.editItem = event;
        };

        vm.keyboardInput = function (key) {
            resetTimer();
            vm.showValidationErrors = true;
            var keyCode = key.currentTarget.outerText;
            if (keyCode === 'SPACE') {
                vm.lastLetterIsSpace = true;
                return;
            }

            if (keyCode === 'DEL') {
                vm.editItem.$setViewValue(vm.editItem.$viewValue.substr(0, vm.editItem.$viewValue.length - 1));
                vm.editItem.$render();
                return;
            }

            if (vm.lastLetterIsSpace) {
                vm.editItem.$setViewValue(vm.editItem.$viewValue + ' ' + keyCode);
                vm.lastLetterIsSpace = false;
            } else {
                vm.editItem.$setViewValue(vm.editItem.$viewValue + keyCode);
            }
            vm.editItem.$render();
        };

        vm.paged = function () {
            prevSelection = null;
            vm.searchName(tableStateRef);
        };

        vm.updateKiosk = function () {
            logger.info('changed kiosk', vm.kiosk);
            localStorage.setItem('kiosk', vm.kiosk);
        };

        vm.searchName = function (tableState) {
            tableStateRef = tableState;

            if (vm.searchForm !== undefined && vm.searchForm.$invalid) {
                vm.showValidationErrors = true;
                return;
            }
            var names = vm.searchTerm.split(' ');
            var fn = names[1] ? names[0] : '';
            var ln = names[1] || names[0];

            vm.searchModel.firstname = fn;
            vm.searchModel.lastname = ln;
            vm.searchModel.orderBy = 'firstname';

            peopleService.query(vm.searchModel)
              .then(function (data) {
                  vm.people = data.items;
                  vm.searchModel = data;

                  $state.go('home.list')
                      .then(function () {
                          resetTimer();
                      });
              });
        };

        vm.goBack = function () {
            resetTimer();
            history.back();
        };

        vm.gotoPledge = function () {
            if (vm.createForm.$invalid) {
                vm.showValidationErrors = true;
                toastr.error('Please correct your information');
                return;
            }

            vm.person.dateCreated = moment().format('MM/DD/YYYY HH:mm:ss');
            vm.person.isDonor = vm.person.isPriority = false;
            vm.person.firstname = Humanize.titleCase(vm.person.firstname.toLowerCase());
            vm.person.lastname = Humanize.titleCase(vm.person.lastname.toLowerCase());
            vm.person.fuzzyMatchValue = matchValue(vm.person);
            if (vm.person.emailAddress) vm.person.emailAddress = vm.person.emailAddress.toLowerCase();

            $state.go('home.pledge')
                .then(function () {
                    resetTimer();
                });
        };

        vm.gotoSearch = function () {
            $state.go('home.search')
                .then(function () {
                    vm.showValidationErrors = false;
                    vm.editItem = vm.searchForm.searchTerm;
                    resetTimer();
                });
        };

        vm.gotoCreate = function gotoCreate() {
            $state.go('home.create')
                .then(function () {
                    vm.editItem = vm.createForm.firstname;
                    vm.showValidationErrors = false;
                    vm.person = { firstname: '', lastname: '' };
                    createValidationWatcher();
                    resetTimer();
                });
        };

        vm.cancel = function () {
            vm.person = { firstname: '', lastname: '' };
            vm.searchTerm = '';
            vm.people = [];

            $state.go('home')
                .then(function () {
                    $timeout.cancel(timer);
                });
        };

        vm.finish = function () {
            $state.go('home.finish')
                .then(function () {
                    logger.info('sending to hub');
                    hub.server.addName(vm.kiosk, vm.person)
                        .then(function () {
                            logger.info('Sent person to WOT', vm.person);
                            resetTimer();
                        });
                });
        };

        vm.save = function () {
            peopleService.create(vm.person)
                .then(function (data) {
                    vm.finish();
                });
        };

        vm.unlockSettings = function (key) {
            logger.info('keyCode', keyCode, false);
            if (keyCode.length > 4) {
                keyCode = key;
            } else {
                keyCode += key.toString();
            }

            if (keyCode === '12') {
                $state.go('home.config')
                    .then(function () {
                        keyCode = '';
                        logger.info('current kiosk', vm.kiosk);
                    });
            }
        };

        vm.saveConfig = function () {
            configurationService.update(vm.config)
                .then(function (data) {
                    vm.config = data;
                    toastr.success('Settings Saved!');
                    hub.server.configurationChange(vm.config)
                        .then(function () {
                            logger.info('Changes saved and sent to WOT');
                        });
                });
        };

        function matchValue(person) {
            var value = 0.0;
            var fn = getFullName(person);

            _.forEach(censors, function (censor) {
                var idx = clj_fuzzy.metrics.dice(fn, censor.word);
                if (idx > value) value = idx;
            });
            return value;
        };

        function getFullName(person) {
            return person.firstname + ' ' + person.lastname;
        }

        function resetTimer() {
            $timeout.cancel(timer);
            timer = $timeout(function () {
                vm.cancel();
            }, waitTime);
        };

        function createValidationWatcher() {
            //logger.info('creating watcher', vm.person, false);
            $scope.$watchCollection('vm.person', function (newVal, oldVal) {
                if (vm.person) {
                    resetTimer();
                    var valid = validatePerson(vm.person);
                    if (vm.createForm) {
                        vm.createForm.firstname.$setValidity('blacklist', valid);
                        vm.createForm.lastname.$setValidity('blacklist', valid);
                    }
                }
            });
        };

        function validatePerson(person) {
            var fullName = (person.firstname ? person.firstname : '') + ' ' + (person.lastname ? person.lastname : '');
            var firstmatch = censors.some(function (e) { return e.word.toUpperCase() === (person.firstname ? person.firstname.toUpperCase() : ''); });
            var lastmatch = censors.some(function (e) { return e.word.toUpperCase() === (person.lastname ? person.lastname.toUpperCase() : ''); });
            var fullmatch = censors.some(function (e) { return e.word.toUpperCase() === fullName.toUpperCase(); });

            var match = firstmatch || lastmatch || fullmatch;
            return !match;
        };
    };
})();
//mark.lawrence
//nav.js

(function () {
    'use strict';

    var controllerId = 'NavController';

    angular.module('app.users').controller(controllerId, mainController);

    mainController.$inject = ['logger'];

    function mainController(logger) {
        var vm = this;

        activate();

        function activate() {
            logger.log(controllerId + ' activated');
            vm.user = JSON.parse(localStorage.getItem('currentUser'));
        }
    };
})();
//manager.js
//mark.lawrence

(function () {
    var controllerId = 'PeopleController';

    angular.module('app.people').controller(controllerId, PeopleController);

    PeopleController.$inject = ['logger', 'peopleService', '$uibModal', 'config'];

    function PeopleController(logger, service, $modal, config) {
        var vm = this;
        var keyCodes = config.keyCodes;

        vm.title = "People Manager";

        vm.currentEdit = null;
        vm.isBusy = false;
        vm.lastDeleted = null;
        vm.lastUpdated = null;

        vm.people = [];
        vm.searchModel = {
            page: 1,
            pageSize: 15,
            orderBy: 'Firstname',
            orderDirection: 'desc'
        };
        vm.searchTerm = '';

        var tableStateRef;

        activate();

        function activate() {
            logger.log(controllerId + ' activated');
        };

        vm.addItem = function addItem() {
            $modal.open({
                templateUrl: '/app/people/views/person.html',
                //controller: ['logger', '$uibModalInstance', 'peopleService', 'item', 'vm', 'storage', editPersonController],
                controller: ['logger', '$uibModalInstance', 'peopleService', 'vm', 'storage', editPersonController],
                controllerAs: 'vm',
                resolve: {
                    vm: vm
                }
            })
                .result.then(function (data) {
                    vm.people.unshift(data);
                    logger.success('Successfully created ' + getFullName(data));
                });
        };

        vm.editItem = function editItem(item) {
            vm.currentEdit = item;
            $modal.open({
                templateUrl: '/app/people/views/person.html',
                //controller: ['logger', '$uibModalInstance', 'peopleService', 'item', 'vm', 'storage', editPersonController],
                controller: ['logger', '$uibModalInstance', 'peopleService', 'vm', 'storage', editPersonController],
                controllerAs: 'vm',
                resolve: {
                    vm: vm
                }
            })
                .result.then(function (data) {
                    vm.lastUpdated = angular.copy(vm.currentEdit);
                    angular.extend(item, data);
                    logger.success('Successfully updated ' + getFullName(data));
                });
        };

        vm.deleteItem = function deleteItem(person) {
            service.remove(person.id)
                .then(function (data) {
                    vm.lastDeleted = person;
                    var idx = vm.people.indexOf(person);
                    vm.people.splice(idx, 1);
                    logger.warning('Deleted person ' + person.firstname + ' ' + person.lastname);
                });
        };

        vm.undoDelete = function () {
            service.create(vm.lastDeleted)
                .then(function (data) {
                    logger.success('Successfully restored ' + data.firstname + ' ' + data.lastname);
                    vm.people.unshift(data);
                    vm.lastDeleted = null;
                });
        };

        vm.undoChange = function () {
            service.update(vm.lastUpdated)
                .then(function (data) {
                    angular.forEach(vm.people,
                        function (u, i) {
                            if (u.id === vm.lastUpdated.id) {
                                vm.people[i] = vm.lastUpdated;
                            }
                        });
                    logger.success('Successfully restored ' + vm.lastUpdated.firstname + ' ' + vm.lastUpdated.lastname);
                    vm.lastUpdated = null;
                });
        };

        vm.search = function search(tableState) {
            tableStateRef = tableState;
            if (!vm.searchModel.isPriority) vm.searchModel.isPriority = null;

            vm.searchModel.dateCreated = vm.daysFilter
                ? moment().subtract(parseInt(vm.daysFilter), 'days').format('MM/DD/YYYY')
                : null;

            if (typeof (tableState.sort.predicate) != "undefined") {
                vm.searchModel.orderBy = tableState.sort.predicate;
                vm.searchModel.orderDirection = tableState.sort.reverse ? 'desc' : 'asc';
            }
            if (typeof (tableState.search.predicateObject) != "undefined") {
                vm.daysFilter = tableState.search.predicateObject.dateCreated ? null : vm.daysFilter;
                vm.searchModel.dateCreated = vm.daysFilter
                    ? vm.searchModel.dateCreated
                    : tableState.search.predicateObject.dateCreated;

                if (tableState.search.predicateObject.fuzzyMatchValue) {
                    vm.searchModel.fuzzyMatchValue = tableState.search.predicateObject.fuzzyMatchValue / 100;
                } else {
                    vm.searchModel.fuzzyMatchValue = null;
                }

                vm.searchModel.isDonor = tableState.search.predicateObject.isDonor;
                vm.searchModel.firstname = tableState.search.predicateObject.firstname;
                vm.searchModel.lastname = tableState.search.predicateObject.lastname;
                vm.searchModel.zipcode = tableState.search.predicateObject.zipCode;
                vm.searchModel.emailAddress = tableState.search.predicateObject.emailAddress;
                vm.searchModel.isPriority = tableState.search.predicateObject.isPriority;
            }

            vm.isBusy = true;
            service.query(vm.searchModel)
                .then(function (data) {
                    vm.people = data.items;
                    vm.searchModel = data;
                    vm.isBusy = false;
                });
        };

        vm.pages = function paged(pageNum) {
            search(tableStateRef);
        };

        vm.quickFilter = function () {
            vm.search(tableStateRef);
        };

        function getFullName(person) {
            return person.firstname + ' ' + person.lastname;
        };
    }

    //function editPersonController(logger, $modal, service, item, model, storage) {
    function editPersonController(logger, $modal, service, model, storage) {
        var vm = this;
        //TODO: Can be made global??
        var censors = JSON.parse(storage.get('censors'));

        vm.item = angular.copy(model.currentEdit);

        vm.close = function () {
            $modal.dismiss();
        };

        vm.matchValue = function () {
            var value = 0.0;
            var fn = getFullName(vm.item);

            _.forEach(censors,
                function (censor) {
                    var idx = clj_fuzzy.metrics.dice(fn, censor.word);
                    if (idx > value) value = idx;
                });
            vm.item.fuzzyMatchValue = value;
        };

        vm.save = function () {
            if (vm.item.id) {
                service.update(vm.item)
                    .then(function (data) {
                        $modal.close(data);
                    });
            } else {
                service.create(vm.item)
                    .then(function (data) {
                        $modal.close(data);
                    });
            }
        };

        function getFullName(item) {
            return item.firstname + ' ' + item.lastname;
        };
    };
})();
//mark.lawrence
//profile.js

(function () {
    'use strict';

    var controllerId = 'ProfileController';

    angular.module('app.users').controller(controllerId, mainController);

    mainController.$inject = ['$scope', '$http', 'logger', 'userService', 'defaults', 'config', '$rootScope'];

    function mainController($scope, $http, logger, service, defaults, config, $rootScope) {
        var vm = this;
        vm.title = 'Profile Manager';
        vm.description = 'Update your profile';

        vm.user = {};

        activate();

        function activate() {
            logger.log(controllerId + ' activated');
            vm.user = JSON.parse(localStorage.getItem('currentUser'));
        };

        vm.fileSelected = function ($files, $file, $event, $rejectedFiles) {
            var reader = new FileReader();
            reader.onload = function (e) {
                var dataURL = reader.result;
                vm.user.userPhoto = dataURL.split(',')[1];
                vm.user.userPhotoType = $file.type;
            };
            reader.readAsDataURL($file);
        };

        vm.save = function () {
            vm.isBusy = true;
            service.update(vm.user)
                .then(function (data) {
                    vm.user = data;
                    localStorage.setItem('currentUser', JSON.stringify(vm.user));
                })
                .finally(function () {
                    vm.isBusy = false;
                    vm.file = null;
                    vm.profileForm.$setPristine();
                    vm.avatarForm.$setPristine();
                });
        };
    };
})();
//censor.service.js
//mark.lawrence

(function () {
    'use strict';

    var serviceId = 'censorService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.Censor;

        var service = {
            create: create,
            get: get,
            query: query,
            update: update,
            remove: remove
        };

        return service;

        function create(censor) {
            return $http.post(url, censor).then(_success);
        };

        function get() {
            return $http.get(url).then(_success);
        };

        function query(searchTerm) {
            if (searchTerm == undefined) {
                return get();
            } else {
                return $http.get(url + '/?search=' + searchTerm).then(_success);
            }
        };

        function update(censor) {
            return $http.put(url, censor).then(_success);
        };

        function remove(id) {
            return $http.delete(url + '/' + id).then(_success);
        };

        function _success(response) {
            return response.data;
        };
    }
})();
//configuration.service.js
//mark.lawrence

(function () {
    'use strict';

    var serviceId = 'configurationService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded ');
        var url = config.apiUrl + config.apiEndPoints.Configuration;

        var service = {
            get: get,
            update: update
        }

        return service;

        function get() {
            return $http.get(url).then(_success);
        }

        function update(config) {
            return $http.put(url, config).then(_success);
        }

        function _success(response) {
            return response.data;
        }
    }
})();
//people.service.js
//mark.lawrence

(function () {
    'use strict';

    var serviceId = 'peopleService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config, exception) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.Person;

        var service = {
            create: create,
            get: get,
            query: query,
            update: update,
            remove: remove,
            getCurrentStats: getCurrentStats
        }

        return service;

        function create(censor) {
            return $http.post(url, censor).then(_success);
        }

        function get() {
            return $http.get(url)
                .then(_success)
                .catch(function (message) { exception.catcher('Failed to retrieve people')(message); });
        }

        function query(search) {
            return $http.post(url + '/search', search)
                .then(_success)
                .catch(function (message) { exception.catcher('Failed to retrieve people')(message); });
        }

        function update(person) {
            return $http.put(url, person).then(_success);
        }

        function remove(id) {
            return $http.delete(url + '/' + id).then(_success);
        }

        function getCurrentStats() {
            return $http.get(url + '/stat')
                .then(_success)
                .catch(function (message) { exception.catcher('Failed to retrieve stats')(message); });
        }

        function _success(response) {
            return response.data;
        }
    }
})();
//user.service.js
//mark.lawrence

(function () {
    'use strict';

    var serviceId = 'userService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.User;

        var service = {
            availableRoles: availableRoles,
            create: create,
            get: get,
            query: query,
            remove: remove,
            update: update,
            uploadAvatar: uploadAvatar
        }

        return service;

        function availableRoles() {
            return $http.get(url + '/roles').then(_success);
        }

        function create(user) {
            return $http.post(url, user).then(_success);
        }

        //TODO: Need a getbyname function
        function get() {
            return $http.get(url).then(_success);
        }

        function query(searchTerm) {
            if (searchTerm != undefined && searchTerm.length > 0) {
                return $http.get(url + '?searchTerm=' + searchTerm).then(_success);
            } else {
                return get(url);
            }
        }

        function update(user) {
            return $http.put(url, user).then(_success);
        }

        function remove(id) {
            return $http.delete(url + '/' + id).then(_success);
        }

        function uploadAvatar(username, avatar) {
            var formData = new FormData();
            formData.append('file', avatar);

            return $http.post(url + '/uploadAvatar/' + username + '/',
                    formData,
                    { headers: { 'Content-Type': undefined } }
                )
                .then(_success);
        }

        function _success(response) {
            return response.data;
        }
    }
})();
(function () {
    'use strict';

    var controllerId = 'UserController';

    angular.module('app.users').controller(controllerId, UserController);

    UserController.$inject = ['logger', 'userService', 'defaults', 'config'];

    function UserController(logger, service, defaults, config) {
        var vm = this;
        vm.title = 'User Manager';
        vm.description = 'Edit and update users';
        var keyCodes = config.keyCodes;

        vm.availableRoles = [];
        vm.clearCreate = clearCreate;
        vm.currentEdit = {};
        vm.isBusy = false;
        vm.lastDeleted = null;
        vm.lastUpdated = null;
        vm.itemToEdit = {};

        vm.user = {
            //userName: null,
            roles: ['user'],
            fullName: '',
            password: defaults.GENERIC_PASSWORD
        };

        var tableStateRef;

        activate();

        function activate() {
            logger.log(controllerId + ' activated');
            getAvailableRoles();
        };

        vm.addItem = function () {
            vm.user.fullName = parseFullName(vm.user.userName);
            vm.user.email = vm.user.userName + defaults.EMAIL_SUFFIX;

            service.create(vm.user)
                .then(function (data) {
                    //TODO: mapping would allow removal of extend method
                    vm.user = angular.extend(vm.user, data);
                    vm.users.unshift(angular.copy(vm.user));
                    logger.success('User ' + vm.user.userName + ' created!');
                    vm.user.userName = null;
                    //TODO: show error user already exists
                });
        };

        vm.cancelEdit = function (id) {
            vm.currentEdit[id] = false;
        };

        vm.deleteItem = function (user) {
            angular.copy(user, vm.lastDeleted = {});
            service.remove(user.id)
                .then(function (data) {
                    var idx = vm.users.indexOf(user);
                    vm.users.splice(idx, 1);
                });
        };

        vm.editItem = function (user) {
            vm.currentEdit[user.id] = true;
            angular.copy(user, vm.itemToEdit = {});
        };

        function getAvailableRoles() {
            service.availableRoles()
                .then(function (data) {
                    vm.availableRoles = data;
                });
        };

        vm.saveItem = function (user) {
            vm.isBusy = true;

            vm.currentEdit[user.id] = false;
            angular.copy(user, vm.lastUpdated = {});
            logger.log('lastUpdated', vm.lastUpdated);
            var roles = [];

            _.forEach(vm.itemToEdit.roles,
                function (role) {
                    roles.push(role.name);
                });
            vm.itemToEdit.roles = roles;

            service.update(vm.itemToEdit)
                .then(function (data) {
                    angular.extend(user, data);
                    logger.success('User ' + data.userName + ' updated!');
                    vm.isBusy = false;
                });
        };

        vm.search = function (tableState) {
            tableStateRef = tableState;
            var searchTerm;

            if (typeof (tableState.search.predicateObject) != 'undefined') {
                searchTerm = tableState.search.predicateObject.searchTerm;
            }

            vm.isBusy = true;
            service.query(searchTerm)
                .then(function (data) {
                    vm.users = data;
                    logger.log('users', vm.users);
                })
                .finally(function () {
                    vm.isBusy = false;
                });
        };

        vm.undoDelete = function () {
            var roles = [];

            _.forEach(vm.lastDeleted.roles, function (role) {
                roles.push(role.name);
                logger.log('role', role.name);
            });
            vm.lastDeleted.roles = roles;
            vm.lastDeleted.password = defaults.GENERIC_PASSWORD;

            service.create(vm.lastDeleted).then(function (data) {
                logger.success('Successfully restored ' + data.userName);
                vm.users.unshift(data);
                vm.lastDeleted = null;
            });
        };

        vm.undoChange = function () {
            vm.isBusy = true;

            service.update(vm.lastUpdated)
                .then(function (data) {
                    angular.forEach(vm.users,
                        function (u, i) {
                            if (u.id === vm.lastUpdated.id) {
                                vm.users[i] = vm.lastUpdated;
                            }
                        });
                    logger.success('Successfully restored ' + data.userName);
                    vm.lastUpdated = null;
                })
                .finally(function () {
                    vm.isBusy = false;
                });
        };

        function clearCreate($event) {
            if ($event.keyCode === keyCodes.esc) {
                vm.user.userName = '';
            };
        };

        function parseFullName(name) {
            var arr = name.split('.');
            var fullname = '';

            _.forEach(arr, function (v) {
                fullname += _.capitalize(v) + ' ';
            });

            return _.trim(fullname);
        };
    };
})();
//# sourceMappingURL=data:application/json;base64,
